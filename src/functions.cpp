//
// C++ Implementation: functions
//
// Description:
//
//
// Author: Daniel Rollings <dasher@zenonline.com>, (C) 2005
//
// Copyright: See COPYING file that comes with this distribution
//
//


#include "functions.hpp"
#include <boost/random/mersenne_twister.hpp>

using namespace std;



namespace Random
{
	static ::boost::mt19937 oRandom;	
	UInt32 Random(void)
	{	
		return oRandom.operator()();	
	}
}


namespace Dice
{
	
	// These are precalculated arrays of results from Twine's dice.py aimed at 
	// sacrificing a little extra memory for the quickest result 
	UInt8 table_3d6[] = {
		  3,   4,   4,   4,   5,   5,   5,   5,   5,   5,   6,   6,   6,   6,   6,   6,   6,   6,   6,   7,
		  7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   8,   8,   8,
		  8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   9,   9,   9,   9,   9,   9,   9,   9,
		  9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,   9,  10,  10,  10,  10,  10,
		 10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,
		 11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,
		 11,  11,  11,  11,  11,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,
		 12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,
		 13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,
		 14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  18
	};
	
	
	UInt8 table_3d20[] = {
		  3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  13,  14,  14,  15,  15,  16,  16,  16,  17,
		 17,  17,  18,  18,  18,  19,  19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,
		 22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,
		 25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,
		 28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,
		 31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,
		 34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  37,  37,
		 37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,
		 40,  40,  40,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  44,  44,  44,
		 44,  45,  45,  45,  46,  46,  46,  47,  47,  47,  48,  48,  49,  49,  50,  50,  51,  52,  53,  54,
		 55,  56,  57,  58,  59,  60
	};
}


int PointsGain(int own, int versus, int modifier)
{
	int gain;

	own = own < 1 ? 1 : (own > 3000 ? 3000 : own);
	versus += modifier;
	versus = versus < 1 ? 1 : (versus > 3000 ? 3000 : versus);

	gain = (versus * 100) / own;
	gain << 1;
	gain /= 100;
	
	return gain;
}
