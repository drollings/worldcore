/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "skills_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Skills {

int _kFlagsValues[] = {
  LEARNABLE,
  STAT,
  SKILL,
  PRAYER,
  COMBATMOVE,
  WEAPONPROF,
  LANGUAGE,
  STEALTH,
  MAGICROOT,
  MAGICMETHOD,
  MAGICTECHNIQUE,
  MAGICSPELL,
  ORDINATION,
  SPHERE,
  VOW,
  PSI,
  DEFAULT
};
const char* _kFlagsNames[] = {
  "LEARNABLE",
  "STAT",
  "SKILL",
  "PRAYER",
  "COMBATMOVE",
  "WEAPONPROF",
  "LANGUAGE",
  "STEALTH",
  "MAGICROOT",
  "MAGICMETHOD",
  "MAGICTECHNIQUE",
  "MAGICSPELL",
  "ORDINATION",
  "SPHERE",
  "VOW",
  "PSI",
  "DEFAULT"
};
const std::map<int, const char*> _Flags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kFlagsValues, _kFlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Flags val) {
  std::map<int, const char*>::const_iterator it = _Flags_VALUES_TO_NAMES.find(val);
  if (it != _Flags_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTargetsValues[] = {
  Ignore,
  CharRoom,
  CharWorld,
  FightSelf,
  FightVict,
  SelfOnly,
  NotSelf,
  ObjInv,
  ObjRoom,
  ObjWorld,
  ObjEquip,
  ObjDest,
  CharObj,
  IgnChar,
  IgnObj,
  Melee,
  Ranged
};
const char* _kTargetsNames[] = {
  "Ignore",
  "CharRoom",
  "CharWorld",
  "FightSelf",
  "FightVict",
  "SelfOnly",
  "NotSelf",
  "ObjInv",
  "ObjRoom",
  "ObjWorld",
  "ObjEquip",
  "ObjDest",
  "CharObj",
  "IgnChar",
  "IgnObj",
  "Melee",
  "Ranged"
};
const std::map<int, const char*> _Targets_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(17, _kTargetsValues, _kTargetsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Targets val) {
  std::map<int, const char*>::const_iterator it = _Targets_VALUES_TO_NAMES.find(val);
  if (it != _Targets_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kStatsValues[] = {
  SKLBASE_STR,
  SKLBASE_INT,
  SKLBASE_AGI,
  SKLBASE_HT,
  SKLBASE_VISION,
  SKLBASE_HEARING,
  SKLBASE_MOVE
};
const char* _kStatsNames[] = {
  "SKLBASE_STR",
  "SKLBASE_INT",
  "SKLBASE_AGI",
  "SKLBASE_HT",
  "SKLBASE_VISION",
  "SKLBASE_HEARING",
  "SKLBASE_MOVE"
};
const std::map<int, const char*> _Stats_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kStatsValues, _kStatsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Stats val) {
  std::map<int, const char*>::const_iterator it = _Stats_VALUES_TO_NAMES.find(val);
  if (it != _Stats_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kStatBasesValues[] = {
  STAT_STR,
  STAT_INT,
  STAT_AGI,
  STAT_HT,
  STAT_VISION,
  STAT_HEARING,
  STAT_MOVE,
  STAT_MAX,
  TOP
};
const char* _kStatBasesNames[] = {
  "STAT_STR",
  "STAT_INT",
  "STAT_AGI",
  "STAT_HT",
  "STAT_VISION",
  "STAT_HEARING",
  "STAT_MOVE",
  "STAT_MAX",
  "TOP"
};
const std::map<int, const char*> _StatBases_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kStatBasesValues, _kStatBasesNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const StatBases val) {
  std::map<int, const char*>::const_iterator it = _StatBases_VALUES_TO_NAMES.find(val);
  if (it != _StatBases_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

} // namespace
