/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "signals_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Signals {

int _kSignalsValues[] = {
  GLOBAL,
  RANDOM,
  COMMAND,
  SPEECH,
  GREET,
  LEAVE,
  DOOR,
  DROP,
  GET,
  ACT,
  DEATH,
  FIGHT,
  HITPRCNT,
  SIT,
  GIVE,
  WEAR,
  CONSUME,
  REMOVE,
  LOAD,
  TIMER,
  START,
  QUIT,
  ATTACK,
  INSTALL,
  CALL,
  ENTER,
  DESTROYREPAIR,
  ATTACKED,
  KILL,
  PUT,
  MOTION,
  RESET,
  TOP
};
const char* _kSignalsNames[] = {
  "GLOBAL",
  "RANDOM",
  "COMMAND",
  "SPEECH",
  "GREET",
  "LEAVE",
  "DOOR",
  "DROP",
  "GET",
  "ACT",
  "DEATH",
  "FIGHT",
  "HITPRCNT",
  "SIT",
  "GIVE",
  "WEAR",
  "CONSUME",
  "REMOVE",
  "LOAD",
  "TIMER",
  "START",
  "QUIT",
  "ATTACK",
  "INSTALL",
  "CALL",
  "ENTER",
  "DESTROYREPAIR",
  "ATTACKED",
  "KILL",
  "PUT",
  "MOTION",
  "RESET",
  "TOP"
};
const std::map<int, const char*> _Signals_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(33, _kSignalsValues, _kSignalsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Signals val) {
  std::map<int, const char*>::const_iterator it = _Signals_VALUES_TO_NAMES.find(val);
  if (it != _Signals_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

} // namespace
