/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "base_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Base {

int _kEngineFlagsValues[] = {
  PURGED,
  DIRTY,
  SUPER,
  AFFECTED,
  BUSY
};
const char* _kEngineFlagsNames[] = {
  "PURGED",
  "DIRTY",
  "SUPER",
  "AFFECTED",
  "BUSY"
};
const std::map<int, const char*> _EngineFlags_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kEngineFlagsValues, _kEngineFlagsNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const EngineFlags val) {
  std::map<int, const char*>::const_iterator it = _EngineFlags_VALUES_TO_NAMES.find(val);
  if (it != _EngineFlags_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

} // namespace
